input AddCategoryInput {
  title: String!
  description: String = ""
  slug: String!
  parent: ObjectId
}

input AddUserInput {
  username: String!
  password: String!
  email: String!
  avatar: String
  avatarFile: ObjectId
  privileges: UserPrivilege
  meta: JSON
}

input AddVolumeInput {
  name: String!
  user: ObjectId
  type: VolumeType!
  identifier: String!
  memoryAllocated: Int!
  meta: JSON
}

"""Object representing a Authentication response"""
type AuthResponse {
  message: String!
  authenticated: Boolean!
  user: User
}

"""Object representing a Category"""
type Category {
  _id: ObjectId!
  title: String!
  description: String
  slug: String!
  parent: Category
  children: [Category!]
}

"""Object representing a File"""
type File {
  _id: ObjectId!
  name: String!
  identifier: String!
  publicURL: String!
  mimeType: String!
  created: Int!
  size: Long!
  numDownloads: Int!
  isPublic: Boolean!
  user: User!
  volume: Volume!
  parentFile: File!
  meta: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  username: String!
  password: String!
  remember: Boolean = true
}

"""64-bit integral numbers"""
scalar Long

type Mutation {
  createCategory(token: AddCategoryInput!): Category!
  updateCategory(token: UpdateCategoryInput!): Category!
  removeCategory(id: String!): Boolean!
  addUser(token: AddUserInput!): User!
  removeUser(username: String!): Boolean!
  updateUser(token: UpdateUserInput!): User!
  login(token: LoginInput!): AuthResponse!
  register(token: RegisterInput!): AuthResponse!
  approveActivation(username: String!): Boolean!
  resendActivation(activationPath: String = "/activate", username: String!): Boolean!
  requestPasswordReset(accountRedirectURL: String = "/", username: String!): Boolean!
  passwordReset(password: String!, key: String!, username: String!): Boolean!
  logout: Boolean!
  addVolume(token: AddVolumeInput!): Volume!
  updateVolume(token: UpdateVolumeInput!): Volume!
  removeVolume(id: ObjectId!): Boolean!
  removeFile(volumeId: ObjectId, id: ObjectId!): Boolean!
}

"""Mongo object id scalar type"""
scalar ObjectId

"""A page of wrapper of categories"""
type PaginatedCategoryResponse {
  data: [Category!]!
  count: Int!
  limit: Int!
  index: Int!
}

"""A page of wrapper of templates"""
type PaginatedTemplateResponse {
  data: [Template!]!
  count: Int!
  limit: Int!
  index: Int!
}

"""A page of wrapper of users"""
type PaginatedUserResponse {
  data: [User!]!
  count: Int!
  limit: Int!
  index: Int!
}

"""A page of wrapper of volumes"""
type PaginatedVolumeResponse {
  data: [Volume!]!
  count: Int!
  limit: Int!
  index: Int!
}

type Query {
  category(slug: String, id: String): Category

  """Gets an array of all categories"""
  categories(root: Boolean = false, index: Int = 0, limit: Int = 10): PaginatedCategoryResponse!
  user(user: String!): User
  users(index: Int = 0, limit: Int = 10, search: String = ""): PaginatedUserResponse!
  authenticated: AuthResponse!
  volume(id: ObjectId!): Volume
  volumes(index: Int = 0, limit: Int = 10, search: String = "", user: String = "", sortOrder: SortOrder = desc, sortType: VolumeSortType = name): PaginatedVolumeResponse!
  template(id: ObjectId): Template

  """Gets an array of all templates"""
  templates: PaginatedTemplateResponse!
}

input RegisterInput {
  username: String!
  password: String!
  email: String!
  activationUrl: String
}

enum SortOrder {
  asc
  desc
}

"""Object representing a Template"""
type Template {
  _id: ObjectId!
  name: String!
  description: String!
  defaultZone: String!
  zones: [String!]!
}

input UpdateCategoryInput {
  title: String!
  description: String = ""
  slug: String!
  parent: ObjectId
  _id: ObjectId!
}

input UpdateUserInput {
  username: String!
  password: String!
  email: String!
  avatar: String
  avatarFile: ObjectId
  privileges: UserPrivilege
  meta: JSON
  _id: ObjectId!
}

input UpdateVolumeInput {
  name: String!
  user: ObjectId
  type: VolumeType!
  identifier: String!
  memoryAllocated: Int!
  meta: JSON
  _id: ObjectId!
  memoryUsed: Int!
}

"""Object representing a User"""
type User {
  _id: ObjectId!
  username: String!
  registerKey: String!
  email: String!
  avatar: String!
  avatarFile: File
  createdOn: Long!
  lastLoggedIn: Long!
  isActivated: Boolean!
  privileges: UserPrivilege!
  meta: JSON!
}

"""The core type of user privilege"""
enum UserPrivilege {
  super
  admin
  regular
}

"""Object representing a Volume"""
type Volume {
  _id: ObjectId!
  name: String!
  identifier: String!
  type: VolumeType!
  created: Int!
  memoryUsed: Long!
  memoryAllocated: Long!
  user: User!
  meta: JSON!
}

"""The type of sorting performed when fetching volumes"""
enum VolumeSortType {
  created
  memory
  name
}

"""The core type of volume type"""
enum VolumeType {
  Google
  Local
}
